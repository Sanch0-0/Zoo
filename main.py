'''
Основные требования:
1. Класс Animal
    Создайте абстрактный класс Animal, который будет иметь:
    Абстрактный метод make_sound(), который каждый класс-наследник должен переопределить, чтобы животное издавало соответствующий звук.
    Методы для получения информации о животном: его имени,
    возрасте, весе и потребностях в питании.
    Поля, защищенные или приватные, которые будут хранить
    общие характеристики, такие как возраст, вес и имя.

2. Подклассы для разных типов животных
    Создайте классы-наследники для разных типов животных,
    например, Lion, Elephant, Parrot, Penguin, Crocodile, Girafe, Snake. Каждый класс должен:
    Переопределять метод make_sound() с уникальным звуком для каждого животного.
    Иметь свои уникальные характеристики и методы, такие как
    hunt() для льва или fly() для попугая.
    Переопределять метод, который рассчитывает количество
    корма, нужное для животного в зависимости от его веса.

3. Класс Zoo
    Реализуйте класс Zoo, который будет управлять списком
    животных. Он должен иметь:
    Метод для добавления и удаления животных.
    Метод для вывода всех животных в зоопарке и их характеристик.
    Метод feed_all(), который будет проходить по списку
    животных и рассчитывать, сколько корма нужно для каждого.
    Метод make_all_sounds(), который заставит все животные издать свой звук.

4. Интерфейсы и полиморфизм
    Если ваше ООП-язык поддерживает интерфейсы, создайте
    интерфейсы, такие как Flyable (для тех, кто может летать),
    Huntable (для тех, кто охотится), и примените их к
    соответствующим классам.
    Используйте полиморфизм, чтобы обрабатывать объекты типа
    Animal, а не конкретные классы, при вызове методов в классе Zoo.

5. Учет зоопарка
    Добавьте метод generate_report() в классе Zoo, который будет
    генерировать отчет с информацией о каждом животном,
    количестве требуемого корма, а также общей информации по зоопарку.

6. Дополнительные возможности (опционально)
    Добавьте возможность сортировки животных по возрасту, весу или типу.
    Реализуйте систему подсчета статистики, например, сколько
    животных находится в каждой категории, сколько корма требуется в день и т
'''

from Animals import *
from Zoo import Zoo



lion1 = Lion("Симба", 10, "Млекопитающее", 190, "Плотоядное", "Мясо")
lion2 = Lion("Нала", 8, "Млекопитающее", 170, "Плотоядное", "Мясо")
lion3 = Lion("Муфаса", 12, "Млекопитающее", 210, "Плотоядное", "Мясо")

elephant1 = Elephant("Дамбо", 23, "Млекопитающее", 5000, "Травоядное", "Фрукты")
elephant2 = Elephant("Элли", 32, "Млекопитающее", 5200, "Травоядное", "Листва")
elephant3 = Elephant("Мэнни", 15, "Млекопитающее", 4800, "Травоядное", "Трава")

parrot1 = Parrot("Гоша", 2, "Птица", 1, "Всеядное", "Злаки")
parrot2 = Parrot("Кеша", 4, "Птица", 2, "Всеядное", "Фрукты")
parrot3 = Parrot("Рио", 3, "Птица", 1.5, "Всеядное", "Зерна")

penguin1 = Penguin("Джимми", 5, "Птица", 30, "Плотоядное", "Рыба")
penguin2 = Penguin("Скиппер", 7, "Птица", 28, "Плотоядное", "Рыба")
penguin3 = Penguin("Ковальски", 6, "Птица", 35, "Плотоядное", "Рыба")

crocodile1 = Crocodile("Чак", 30, "Рептилия", 500, "Плотоядное", "Мясо")
crocodile2 = Crocodile("Гектор", 25, "Рептилия", 450, "Плотоядное", "Мясо")
crocodile3 = Crocodile("Ларри", 20, "Рептилия", 400, "Плотоядное", "Рыба")

snake1 = Snake("Тесс", 3, "Рептилия", 10, "Плотоядное", "Мясо")
snake2 = Snake("Каа", 5, "Рептилия", 12, "Плотоядное", "Мясо")
snake3 = Snake("Вайпер", 4, "Рептилия", 9, "Плотоядное", "Рыба")

moose1 = Moose("Ричи", 17, "Парнокопытное", 650, "Травоядное", "Листва")
moose2 = Moose("Бак", 12, "Парнокопытное", 600, "Травоядное", "Листва")
moose3 = Moose("Фрэнк", 15, "Парнокопытное", 700, "Травоядное", "Трава")



zoo = Zoo()
zoo.add_animals(
    lion1, lion2, lion3,
    elephant1, elephant2, elephant3,
    parrot1, parrot2, parrot3,
    penguin1, penguin2, penguin3,
    crocodile1, crocodile2, crocodile3,
    snake1, snake2, snake3,
    moose1, moose2, moose3
)
zoo.remove_animals(crocodile3, lion2, parrot2)
zoo.show_total_info()
zoo.make_all_sounds()
zoo.feed_all()

zoo.generate_report()
